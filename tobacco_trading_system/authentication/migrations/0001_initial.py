# Generated by Django 4.2.7 on 2025-09-27 09:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "is_timb_staff",
                    models.BooleanField(default=False, help_text="TIMB staff member"),
                ),
                (
                    "is_merchant",
                    models.BooleanField(default=False, help_text="Tobacco merchant"),
                ),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("national_id", models.CharField(blank=True, max_length=50)),
                ("is_verified", models.BooleanField(default=False)),
                ("verification_token", models.CharField(blank=True, max_length=100)),
                ("verification_sent_at", models.DateTimeField(blank=True, null=True)),
                ("two_factor_enabled", models.BooleanField(default=False)),
                ("backup_codes", models.JSONField(blank=True, default=list)),
                ("login_attempts", models.IntegerField(default=0)),
                ("locked_until", models.DateTimeField(blank=True, null=True)),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("last_login_device", models.CharField(blank=True, max_length=200)),
                ("login_history", models.JSONField(blank=True, default=list)),
                ("password_changed_at", models.DateTimeField(auto_now_add=True)),
                ("password_reset_required", models.BooleanField(default=False)),
                ("email_notifications", models.BooleanField(default=True)),
                ("sms_notifications", models.BooleanField(default=False)),
                ("push_notifications", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_key", models.CharField(max_length=40, unique=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("device_type", models.CharField(blank=True, max_length=50)),
                ("browser_info", models.CharField(blank=True, max_length=200)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("login_time", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("logout_time", models.DateTimeField(blank=True, null=True)),
                ("is_suspicious", models.BooleanField(default=False)),
                (
                    "security_score",
                    models.DecimalField(decimal_places=2, default=100.0, max_digits=5),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "ordering": ["-last_activity"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(blank=True, max_length=200)),
                ("license_number", models.CharField(blank=True, max_length=100)),
                ("registration_date", models.DateField(blank=True, null=True)),
                ("business_address", models.TextField(blank=True)),
                ("address", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                ("linkedin_url", models.URLField(blank=True)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile_pictures/"
                    ),
                ),
                ("bio", models.TextField(blank=True, max_length=500)),
                (
                    "theme_preference",
                    models.CharField(
                        choices=[
                            ("timb", "TIMB Theme"),
                            ("merchant", "Merchant Theme"),
                            ("light", "Light Theme"),
                            ("dark", "Dark Theme"),
                            ("custom", "Custom Theme"),
                        ],
                        default="timb",
                        max_length=20,
                    ),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("sms_notifications", models.BooleanField(default=False)),
                ("dashboard_layout", models.JSONField(blank=True, default=dict)),
                ("widget_preferences", models.JSONField(blank=True, default=dict)),
                (
                    "profile_visibility",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("MERCHANTS_ONLY", "Merchants Only"),
                            ("PRIVATE", "Private"),
                        ],
                        default="MERCHANTS_ONLY",
                        max_length=20,
                    ),
                ),
                ("show_activity_status", models.BooleanField(default=True)),
                ("allow_contact", models.BooleanField(default=True)),
                ("encrypted_sensitive_data", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
            },
        ),
        migrations.CreateModel(
            name="EncryptedData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data_ref",
                    models.CharField(db_index=True, max_length=100, unique=True),
                ),
                ("encrypted_content", models.TextField()),
                ("content_type", models.CharField(max_length=50)),
                ("access_permissions", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Encrypted Data",
                "verbose_name_plural": "Encrypted Data",
                "db_table": "qr_tokens_encrypteddata",
            },
        ),
        migrations.CreateModel(
            name="SecurityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("LOGIN_SUCCESS", "Successful Login"),
                            ("LOGIN_FAILED", "Failed Login"),
                            ("LOGOUT", "Logout"),
                            ("PASSWORD_CHANGE", "Password Change"),
                            ("PROFILE_UPDATE", "Profile Update"),
                            ("SUSPICIOUS_ACTIVITY", "Suspicious Activity"),
                            ("ACCOUNT_LOCKED", "Account Locked"),
                            ("ACCOUNT_UNLOCKED", "Account Unlocked"),
                            ("TOKEN_GENERATED", "Token Generated"),
                            ("TOKEN_USED", "Token Used"),
                            ("DATA_ACCESS", "Data Access"),
                            ("PERMISSION_CHANGE", "Permission Change"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="LOW",
                        max_length=10,
                    ),
                ),
                ("description", models.TextField()),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("additional_data", models.JSONField(blank=True, default=dict)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Security Log",
                "verbose_name_plural": "Security Logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["event_type", "timestamp"],
                        name="authenticat_event_t_22d9c8_idx",
                    ),
                    models.Index(
                        fields=["user", "timestamp"],
                        name="authenticat_user_id_b37a53_idx",
                    ),
                    models.Index(
                        fields=["severity", "timestamp"],
                        name="authenticat_severit_cf9731_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="QRToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.CharField(max_length=100, unique=True)),
                ("data_ref", models.CharField(max_length=100)),
                ("token_type", models.CharField(default="data_access", max_length=50)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("access_count", models.IntegerField(default=0)),
                ("max_uses", models.IntegerField(default=10)),
                ("expires_at", models.DateTimeField()),
                ("is_revoked", models.BooleanField(default=False)),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_accessed", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "revoked_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="revoked_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "QR Token",
                "verbose_name_plural": "QR Tokens",
                "indexes": [
                    models.Index(fields=["token"], name="authenticat_token_68127c_idx"),
                    models.Index(
                        fields=["expires_at"], name="authenticat_expires_dbcd05_idx"
                    ),
                ],
            },
        ),
    ]
