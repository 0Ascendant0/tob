# Generated by Django 4.2.7 on 2025-09-27 09:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("timb_dashboard", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="SystemNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("SYSTEM_UPDATE", "System Update"),
                            ("MAINTENANCE", "Maintenance Notice"),
                            ("SECURITY_ALERT", "Security Alert"),
                            ("MARKET_NEWS", "Market News"),
                            ("REGULATORY_CHANGE", "Regulatory Change"),
                            ("PRICE_ALERT", "Price Alert"),
                            ("TRANSACTION_ALERT", "Transaction Alert"),
                            ("PERFORMANCE_REPORT", "Performance Report"),
                            ("TRAINING_ANNOUNCEMENT", "Training Announcement"),
                            ("FEATURE_UPDATE", "Feature Update"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Priority"),
                            ("NORMAL", "Normal Priority"),
                            ("HIGH", "High Priority"),
                            ("URGENT", "Urgent"),
                        ],
                        default="NORMAL",
                        max_length=10,
                    ),
                ),
                (
                    "recipient_group",
                    models.CharField(
                        choices=[
                            ("ALL_USERS", "All Users"),
                            ("TIMB_STAFF", "TIMB Staff"),
                            ("MERCHANTS", "All Merchants"),
                            ("ACTIVE_TRADERS", "Active Traders"),
                            ("SPECIFIC_MERCHANTS", "Specific Merchants"),
                        ],
                        default="ALL_USERS",
                        max_length=50,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("action_url", models.URLField(blank=True)),
                ("action_text", models.CharField(blank=True, max_length=50)),
                ("image_url", models.URLField(blank=True)),
                ("attachment_url", models.URLField(blank=True)),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("scheduled_for", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("encrypted_metadata", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["recipient", "is_read"],
                        name="realtime_da_recipie_785b7a_idx",
                    ),
                    models.Index(
                        fields=["notification_type", "created_at"],
                        name="realtime_da_notific_9214c0_idx",
                    ),
                    models.Index(
                        fields=["priority", "created_at"],
                        name="realtime_da_priorit_325f96_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RealTimePrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("current_price", models.DecimalField(decimal_places=2, max_digits=8)),
                (
                    "previous_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "price_change",
                    models.DecimalField(decimal_places=2, default=0, max_digits=8),
                ),
                (
                    "opening_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "high_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "low_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "volume_traded_today",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "bid_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "ask_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("market_depth", models.JSONField(blank=True, default=dict)),
                (
                    "volatility_index",
                    models.DecimalField(decimal_places=3, default=0, max_digits=5),
                ),
                (
                    "trend_indicator",
                    models.CharField(
                        choices=[
                            ("BULLISH", "Bullish"),
                            ("BEARISH", "Bearish"),
                            ("NEUTRAL", "Neutral"),
                            ("VOLATILE", "Volatile"),
                        ],
                        default="NEUTRAL",
                        max_length=10,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("last_trade_time", models.DateTimeField(blank=True, null=True)),
                ("encrypted_market_data", models.TextField(blank=True)),
                (
                    "floor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccofloor",
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
            ],
            options={
                "verbose_name": "Real-Time Price",
                "verbose_name_plural": "Real-Time Prices",
                "ordering": ["grade__category", "grade__grade_code"],
                "unique_together": {("grade", "floor")},
            },
        ),
        migrations.CreateModel(
            name="MarketDataSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("snapshot_date", models.DateTimeField(auto_now_add=True)),
                ("total_transactions", models.IntegerField(default=0)),
                (
                    "total_volume",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "total_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "average_price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=8),
                ),
                (
                    "top_gainer_change",
                    models.DecimalField(decimal_places=2, default=0, max_digits=8),
                ),
                (
                    "top_loser_change",
                    models.DecimalField(decimal_places=2, default=0, max_digits=8),
                ),
                (
                    "highest_volume_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "market_sentiment",
                    models.CharField(
                        choices=[
                            ("VERY_BULLISH", "Very Bullish"),
                            ("BULLISH", "Bullish"),
                            ("NEUTRAL", "Neutral"),
                            ("BEARISH", "Bearish"),
                            ("VERY_BEARISH", "Very Bearish"),
                        ],
                        default="NEUTRAL",
                        max_length=20,
                    ),
                ),
                (
                    "volatility_index",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("floor_activity_scores", models.JSONField(blank=True, default=dict)),
                ("regional_data", models.JSONField(blank=True, default=dict)),
                (
                    "weather_impact_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("external_factors", models.JSONField(blank=True, default=list)),
                (
                    "highest_volume_grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="volume_leader_snapshots",
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
                (
                    "most_active_floor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccofloor",
                    ),
                ),
                (
                    "top_gainer_grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="top_gainer_snapshots",
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
                (
                    "top_loser_grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="top_loser_snapshots",
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
            ],
            options={
                "ordering": ["-snapshot_date"],
                "indexes": [
                    models.Index(
                        fields=["snapshot_date"], name="realtime_da_snapsho_43d295_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MarketAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("PRICE_SPIKE", "Price Spike"),
                            ("PRICE_DROP", "Price Drop"),
                            ("VOLUME_SURGE", "Volume Surge"),
                            ("MARKET_ANOMALY", "Market Anomaly"),
                            ("LIQUIDITY_ISSUE", "Liquidity Issue"),
                            ("GRADE_SHORTAGE", "Grade Shortage"),
                            ("QUALITY_CONCERN", "Quality Concern"),
                            ("REGULATORY_UPDATE", "Regulatory Update"),
                            ("WEATHER_IMPACT", "Weather Impact"),
                            ("EXPORT_OPPORTUNITY", "Export Opportunity"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("INFO", "Information"),
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "threshold_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "current_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("affected_regions", models.JSONField(blank=True, default=list)),
                (
                    "market_impact_radius",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("is_resolved", models.BooleanField(default=False)),
                ("resolution_notes", models.TextField(blank=True)),
                ("resolution_time", models.DateTimeField(blank=True, null=True)),
                ("notification_sent", models.BooleanField(default=False)),
                ("email_sent", models.BooleanField(default=False)),
                ("sms_sent", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("encrypted_alert_data", models.TextField(blank=True)),
                (
                    "affected_merchants",
                    models.ManyToManyField(blank=True, to="timb_dashboard.merchant"),
                ),
                (
                    "floor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccofloor",
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["alert_type", "severity"],
                        name="realtime_da_alert_t_3b3acf_idx",
                    ),
                    models.Index(
                        fields=["is_resolved", "created_at"],
                        name="realtime_da_is_reso_8c00d6_idx",
                    ),
                    models.Index(
                        fields=["grade", "created_at"],
                        name="realtime_da_grade_i_5aa42e_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="LiveTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("transaction_id", models.CharField(max_length=50, unique=True)),
                ("quantity", models.DecimalField(decimal_places=2, max_digits=10)),
                ("price", models.DecimalField(decimal_places=2, max_digits=8)),
                ("total_value", models.DecimalField(decimal_places=2, max_digits=12)),
                ("buyer_info", models.CharField(max_length=100)),
                ("seller_info", models.CharField(max_length=100)),
                (
                    "price_impact",
                    models.DecimalField(decimal_places=3, default=0, max_digits=5),
                ),
                (
                    "volume_impact",
                    models.DecimalField(decimal_places=3, default=0, max_digits=5),
                ),
                ("is_flagged", models.BooleanField(default=False)),
                ("is_large_trade", models.BooleanField(default=False)),
                ("is_broadcast", models.BooleanField(default=True)),
                (
                    "fraud_probability",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                (
                    "market_anomaly_score",
                    models.DecimalField(decimal_places=3, default=0, max_digits=5),
                ),
                ("region", models.CharField(blank=True, max_length=100)),
                (
                    "trading_session",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MORNING", "Morning Session"),
                            ("AFTERNOON", "Afternoon Session"),
                            ("EVENING", "Evening Session"),
                        ],
                        max_length=20,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "floor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccofloor",
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["timestamp", "grade"],
                        name="realtime_da_timesta_ae26d6_idx",
                    ),
                    models.Index(
                        fields=["is_broadcast", "timestamp"],
                        name="realtime_da_is_broa_2c9724_idx",
                    ),
                    models.Index(
                        fields=["is_flagged"], name="realtime_da_is_flag_89eba6_idx"
                    ),
                ],
            },
        ),
    ]
