# Generated by Django 4.2.7 on 2025-09-27 09:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("timb_dashboard", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AggregationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("source_model", models.CharField(max_length=100)),
                ("source_field", models.CharField(max_length=100)),
                (
                    "aggregation_type",
                    models.CharField(
                        choices=[
                            ("SUM", "Sum"),
                            ("AVERAGE", "Average"),
                            ("COUNT", "Count"),
                            ("MIN", "Minimum"),
                            ("MAX", "Maximum"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "time_period",
                    models.CharField(
                        choices=[
                            ("DAILY", "Daily"),
                            ("WEEKLY", "Weekly"),
                            ("MONTHLY", "Monthly"),
                            ("QUARTERLY", "Quarterly"),
                            ("YEARLY", "Yearly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("filter_conditions", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "merchant_aggregation_rules",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CustomGrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("custom_grade_name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("target_price", models.DecimalField(decimal_places=2, max_digits=8)),
                (
                    "minimum_order_quantity",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "price_markup_percentage",
                    models.DecimalField(decimal_places=2, default=15.0, max_digits=5),
                ),
                (
                    "quality_standard",
                    models.CharField(
                        choices=[
                            ("PREMIUM", "Premium"),
                            ("STANDARD", "Standard"),
                            ("BASIC", "Basic"),
                        ],
                        default="STANDARD",
                        max_length=20,
                    ),
                ),
                ("flavor_profile", models.CharField(blank=True, max_length=50)),
                ("burn_rate", models.CharField(blank=True, max_length=20)),
                (
                    "moisture_content",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("nicotine_level", models.CharField(blank=True, max_length=20)),
                (
                    "ash_content",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("target_market", models.CharField(blank=True, max_length=100)),
                ("competitive_advantages", models.JSONField(blank=True, default=list)),
                ("marketing_description", models.TextField(blank=True)),
                (
                    "total_produced",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "total_sold",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "production_cost_per_kg",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_draft", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_grades",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Custom Grade",
                "verbose_name_plural": "Custom Grades",
                "unique_together": {("merchant", "custom_grade_name")},
            },
        ),
        migrations.CreateModel(
            name="TradingSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_id", models.CharField(max_length=100, unique=True)),
                ("start_time", models.DateTimeField(default=django.utils.timezone.now)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("transactions_count", models.IntegerField(default=0)),
                (
                    "total_volume_traded",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "total_value_traded",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trading_sessions",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "db_table": "merchant_trading_sessions",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="PurchaseRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("INVENTORY_GAP", "Inventory Gap"),
                            ("MARKET_OPPORTUNITY", "Market Opportunity"),
                            ("SEASONAL_BUY", "Seasonal Purchase"),
                            ("PRICE_ARBITRAGE", "Price Arbitrage"),
                            ("CUSTOM_GRADE_COMPONENT", "Custom Grade Component"),
                            ("RISK_MITIGATION", "Risk Mitigation"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "recommended_quantity",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "recommended_price",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                (
                    "expected_roi",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "current_market_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("price_trend", models.CharField(blank=True, max_length=20)),
                ("market_demand_level", models.CharField(blank=True, max_length=20)),
                ("competitor_activity", models.TextField(blank=True)),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Priority"),
                            ("MEDIUM", "Medium Priority"),
                            ("HIGH", "High Priority"),
                            ("URGENT", "Urgent"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                    ),
                ),
                ("reasoning", models.TextField()),
                ("market_factors", models.JSONField(blank=True, default=list)),
                ("risk_assessment", models.JSONField(blank=True, default=dict)),
                (
                    "optimal_purchase_window_start",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "optimal_purchase_window_end",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "urgency_score",
                    models.DecimalField(decimal_places=2, default=50.0, max_digits=5),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_implemented", models.BooleanField(default=False)),
                ("implementation_notes", models.TextField(blank=True)),
                ("implemented_at", models.DateTimeField(blank=True, null=True)),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "actual_purchase_quantity",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "actual_purchase_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "actual_roi",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="purchase_recommendations",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Purchase Recommendation",
                "verbose_name_plural": "Purchase Recommendations",
                "ordering": ["-priority", "-confidence_score", "-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="MerchantProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "company_logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="merchant_logos/"
                    ),
                ),
                (
                    "company_banner",
                    models.ImageField(
                        blank=True, null=True, upload_to="merchant_banners/"
                    ),
                ),
                ("brand_colors", models.JSONField(blank=True, default=dict)),
                (
                    "theme_preference",
                    models.CharField(
                        choices=[
                            ("light", "Light Theme"),
                            ("dark", "Dark Theme"),
                            ("blue", "Blue Theme"),
                            ("green", "Green Theme"),
                            ("custom", "Custom Theme"),
                        ],
                        default="light",
                        max_length=20,
                    ),
                ),
                ("custom_css", models.TextField(blank=True)),
                (
                    "business_type",
                    models.CharField(
                        choices=[
                            ("PROCESSOR", "Tobacco Processor"),
                            ("EXPORTER", "Tobacco Exporter"),
                            ("MANUFACTURER", "Tobacco Manufacturer"),
                            ("TRADER", "Tobacco Trader"),
                            ("WAREHOUSE", "Warehouse Operator"),
                        ],
                        default="TRADER",
                        max_length=20,
                    ),
                ),
                ("business_description", models.TextField(blank=True, max_length=1000)),
                ("founding_year", models.IntegerField(blank=True, null=True)),
                ("number_of_employees", models.CharField(blank=True, max_length=50)),
                (
                    "annual_capacity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Annual processing capacity in kg",
                        max_digits=15,
                        null=True,
                    ),
                ),
                ("headquarters_address", models.TextField(blank=True)),
                ("phone_primary", models.CharField(blank=True, max_length=20)),
                ("phone_secondary", models.CharField(blank=True, max_length=20)),
                ("email_business", models.EmailField(blank=True, max_length=254)),
                ("website_url", models.URLField(blank=True)),
                ("linkedin_url", models.URLField(blank=True)),
                ("facebook_url", models.URLField(blank=True)),
                ("twitter_url", models.URLField(blank=True)),
                ("certifications", models.JSONField(blank=True, default=list)),
                ("quality_standards", models.JSONField(blank=True, default=list)),
                (
                    "minimum_order_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("payment_terms", models.CharField(blank=True, max_length=100)),
                ("delivery_regions", models.JSONField(blank=True, default=list)),
                (
                    "profile_visibility",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public - Visible to all"),
                            ("MERCHANTS_ONLY", "Merchants Only"),
                            ("PRIVATE", "Private - Not visible"),
                        ],
                        default="MERCHANTS_ONLY",
                        max_length=20,
                    ),
                ),
                ("show_contact_info", models.BooleanField(default=False)),
                ("show_business_stats", models.BooleanField(default=True)),
                ("show_certifications", models.BooleanField(default=True)),
                ("allow_direct_contact", models.BooleanField(default=True)),
                ("allow_public_advertising", models.BooleanField(default=False)),
                ("enable_ai_recommendations", models.BooleanField(default=True)),
                ("enable_risk_assessment", models.BooleanField(default=True)),
                ("enable_custom_grades", models.BooleanField(default=True)),
                ("enable_inventory_management", models.BooleanField(default=True)),
                ("enable_order_management", models.BooleanField(default=True)),
                ("enable_inter_merchant_trading", models.BooleanField(default=True)),
                ("dashboard_layout", models.JSONField(blank=True, default=dict)),
                ("widget_preferences", models.JSONField(blank=True, default=dict)),
                ("theme_customization", models.JSONField(blank=True, default=dict)),
                ("email_notifications", models.BooleanField(default=True)),
                ("sms_notifications", models.BooleanField(default=False)),
                (
                    "price_alert_threshold",
                    models.DecimalField(decimal_places=2, default=10.0, max_digits=5),
                ),
                ("encrypted_business_data", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "merchant",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extended_profile",
                        to="timb_dashboard.merchant",
                    ),
                ),
                (
                    "preferred_grades",
                    models.ManyToManyField(
                        blank=True, to="timb_dashboard.tobaccograde"
                    ),
                ),
            ],
            options={
                "verbose_name": "Merchant Profile",
                "verbose_name_plural": "Merchant Profiles",
            },
        ),
        migrations.CreateModel(
            name="InterMerchantTrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("trade_id", models.CharField(max_length=50, unique=True)),
                ("quantity", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "agreed_price_per_kg",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                ("total_value", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "payment_terms",
                    models.CharField(
                        choices=[
                            ("CASH_ON_DELIVERY", "Cash on Delivery"),
                            ("NET_30", "Net 30 Days"),
                            ("NET_60", "Net 60 Days"),
                            ("ADVANCE_PAYMENT", "Advance Payment"),
                            ("ESCROW", "Escrow Service"),
                        ],
                        default="NET_30",
                        max_length=30,
                    ),
                ),
                ("delivery_terms", models.TextField(blank=True)),
                ("quality_requirements", models.JSONField(blank=True, default=dict)),
                ("delivery_location", models.CharField(blank=True, max_length=200)),
                ("delivery_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PROPOSED", "Proposed"),
                            ("NEGOTIATING", "Under Negotiation"),
                            ("AGREED", "Agreed"),
                            ("PENDING_TIMB_APPROVAL", "Pending TIMB Approval"),
                            ("APPROVED", "TIMB Approved"),
                            ("REJECTED", "TIMB Rejected"),
                            ("IN_TRANSIT", "In Transit"),
                            ("DELIVERED", "Delivered"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("DISPUTED", "Disputed"),
                        ],
                        default="PROPOSED",
                        max_length=25,
                    ),
                ),
                ("proposed_at", models.DateTimeField(auto_now_add=True)),
                ("agreed_at", models.DateTimeField(blank=True, null=True)),
                ("timb_reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("timb_notes", models.TextField(blank=True)),
                ("is_flagged_for_review", models.BooleanField(default=False)),
                (
                    "fraud_risk_score",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                (
                    "price_fairness_score",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                (
                    "market_price_deviation",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                ("risk_factors", models.JSONField(blank=True, default=list)),
                (
                    "contract_document",
                    models.FileField(
                        blank=True, null=True, upload_to="trade_contracts/"
                    ),
                ),
                (
                    "delivery_receipt",
                    models.FileField(
                        blank=True, null=True, upload_to="delivery_receipts/"
                    ),
                ),
                (
                    "quality_certificate",
                    models.FileField(
                        blank=True, null=True, upload_to="quality_certificates/"
                    ),
                ),
                (
                    "deposit_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                ("deposit_paid", models.BooleanField(default=False)),
                ("payment_completed", models.BooleanField(default=False)),
                (
                    "buyer_merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="purchases",
                        to="timb_dashboard.merchant",
                    ),
                ),
                (
                    "custom_grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="merchant_app.customgrade",
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
                (
                    "seller_merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sales",
                        to="timb_dashboard.merchant",
                    ),
                ),
                (
                    "timb_reviewer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Inter-Merchant Trade",
                "verbose_name_plural": "Inter-Merchant Trades",
                "ordering": ["-proposed_at"],
            },
        ),
        migrations.CreateModel(
            name="InterMerchantCommunication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("INQUIRY", "General Inquiry"),
                            ("TRADE_REQUEST", "Trade Request"),
                            ("NEGOTIATION", "Price Negotiation"),
                            ("CONTRACT_DISCUSSION", "Contract Discussion"),
                            ("LOGISTICS", "Logistics Coordination"),
                            ("QUALITY_ISSUE", "Quality Issue"),
                            ("PAYMENT_DISCUSSION", "Payment Discussion"),
                        ],
                        default="INQUIRY",
                        max_length=30,
                    ),
                ),
                ("subject", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "attachment_1",
                    models.FileField(
                        blank=True, null=True, upload_to="merchant_communications/"
                    ),
                ),
                (
                    "attachment_2",
                    models.FileField(
                        blank=True, null=True, upload_to="merchant_communications/"
                    ),
                ),
                (
                    "attachment_3",
                    models.FileField(
                        blank=True, null=True, upload_to="merchant_communications/"
                    ),
                ),
                ("encrypted_trade_data", models.TextField(blank=True)),
                ("is_read", models.BooleanField(default=False)),
                ("is_archived", models.BooleanField(default=False)),
                ("is_starred", models.BooleanField(default=False)),
                ("is_flagged_by_ai", models.BooleanField(default=False)),
                ("flagged_reason", models.TextField(blank=True)),
                (
                    "sentiment_score",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                ("thread_id", models.CharField(blank=True, max_length=50)),
                ("sent_at", models.DateTimeField(auto_now_add=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "from_merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_messages",
                        to="timb_dashboard.merchant",
                    ),
                ),
                (
                    "parent_message",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="merchant_app.intermerchantcommunication",
                    ),
                ),
                (
                    "to_merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_messages",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inter-Merchant Communication",
                "verbose_name_plural": "Inter-Merchant Communications",
                "ordering": ["-sent_at"],
            },
        ),
        migrations.CreateModel(
            name="FarmerRiskAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("farmer_name", models.CharField(max_length=200)),
                ("farmer_id", models.CharField(blank=True, max_length=50)),
                ("location", models.CharField(max_length=200)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("email", models.EmailField(blank=True, max_length=254)),
                (
                    "total_hectares",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("years_experience", models.IntegerField()),
                ("primary_tobacco_type", models.CharField(max_length=50)),
                ("previous_yields", models.JSONField(blank=True, default=list)),
                ("farming_methods", models.CharField(blank=True, max_length=100)),
                ("irrigation_available", models.BooleanField(default=False)),
                (
                    "annual_income",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "debt_level",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("credit_score", models.IntegerField(blank=True, null=True)),
                ("previous_defaults", models.IntegerField(default=0)),
                ("bank_references", models.TextField(blank=True)),
                ("collateral_available", models.TextField(blank=True)),
                (
                    "proposed_contract_value",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                (
                    "proposed_quantity",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("contract_duration_months", models.IntegerField()),
                (
                    "proposed_price_per_kg",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                ("weather_risk_area", models.BooleanField(default=False)),
                ("market_access_score", models.IntegerField(default=70)),
                (
                    "transportation_distance",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                ("alternative_buyers_count", models.IntegerField(default=0)),
                (
                    "risk_score",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LOW", "Low Risk"),
                            ("MEDIUM", "Medium Risk"),
                            ("HIGH", "High Risk"),
                            ("CRITICAL", "Critical Risk"),
                        ],
                        max_length=10,
                    ),
                ),
                ("ai_recommendation", models.TextField(blank=True)),
                ("risk_factors", models.JSONField(blank=True, default=list)),
                ("mitigation_strategies", models.JSONField(blank=True, default=list)),
                (
                    "debt_to_income_ratio",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                (
                    "contract_to_income_ratio",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                (
                    "projected_yield_per_hectare",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("assessment_date", models.DateTimeField(auto_now_add=True)),
                ("is_approved", models.BooleanField(default=False)),
                ("approval_notes", models.TextField(blank=True)),
                ("contract_signed", models.BooleanField(default=False)),
                ("contract_signed_date", models.DateTimeField(blank=True, null=True)),
                ("encrypted_farmer_data", models.TextField(blank=True)),
                (
                    "assessed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="farmer_assessments",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Farmer Risk Assessment",
                "verbose_name_plural": "Farmer Risk Assessments",
                "ordering": ["-assessment_date"],
            },
        ),
        migrations.CreateModel(
            name="ClientOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order_number", models.CharField(max_length=50, unique=True)),
                ("client_name", models.CharField(max_length=200)),
                ("client_email", models.EmailField(blank=True, max_length=254)),
                ("client_phone", models.CharField(blank=True, max_length=20)),
                ("client_address", models.TextField(blank=True)),
                ("client_company", models.CharField(blank=True, max_length=200)),
                (
                    "requested_quantity",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "filled_quantity",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("target_price", models.DecimalField(decimal_places=2, max_digits=8)),
                ("total_amount", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        default="NORMAL",
                        max_length=10,
                    ),
                ),
                ("expected_delivery_date", models.DateField(blank=True, null=True)),
                ("actual_delivery_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("CONFIRMED", "Confirmed"),
                            ("IN_PROGRESS", "In Progress"),
                            ("PARTIALLY_FILLED", "Partially Filled"),
                            ("READY", "Ready for Delivery"),
                            ("DELIVERED", "Delivered"),
                            ("CANCELLED", "Cancelled"),
                            ("ON_HOLD", "On Hold"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PARTIAL", "Partial Payment"),
                            ("PAID", "Fully Paid"),
                            ("OVERDUE", "Overdue"),
                        ],
                        default="PENDING",
                        max_length=10,
                    ),
                ),
                ("quality_specifications", models.JSONField(blank=True, default=dict)),
                (
                    "moisture_requirement",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("packaging_requirements", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("order_notes", models.TextField(blank=True)),
                ("special_requirements", models.TextField(blank=True)),
                ("internal_notes", models.TextField(blank=True)),
                ("tracking_number", models.CharField(blank=True, max_length=100)),
                ("shipping_method", models.CharField(blank=True, max_length=100)),
                (
                    "custom_grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="merchant_app.customgrade",
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_orders",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Client Order",
                "verbose_name_plural": "Client Orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PriceAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("PRICE_INCREASE", "Price Increase"),
                            ("PRICE_DECREASE", "Price Decrease"),
                            ("TARGET_PRICE", "Target Price Reached"),
                            ("VOLATILITY", "High Volatility"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "target_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "percentage_change",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_triggered", models.BooleanField(default=False)),
                ("triggered_at", models.DateTimeField(blank=True, null=True)),
                (
                    "triggered_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_alerts",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "db_table": "merchant_price_alerts",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["merchant", "grade"],
                        name="merchant_pr_merchan_92c951_idx",
                    ),
                    models.Index(
                        fields=["is_active", "is_triggered"],
                        name="merchant_pr_is_acti_c68ede_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="MerchantInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "reserved_quantity",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("average_cost", models.DecimalField(decimal_places=2, max_digits=8)),
                ("quality_grade", models.CharField(blank=True, max_length=20)),
                (
                    "moisture_content",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("origin_location", models.CharField(blank=True, max_length=100)),
                ("harvest_season", models.CharField(blank=True, max_length=20)),
                ("batch_number", models.CharField(blank=True, max_length=50)),
                ("storage_location", models.CharField(blank=True, max_length=100)),
                ("storage_conditions", models.JSONField(blank=True, default=dict)),
                ("warehouse_section", models.CharField(blank=True, max_length=50)),
                (
                    "minimum_threshold",
                    models.DecimalField(decimal_places=2, default=100, max_digits=10),
                ),
                (
                    "reorder_point",
                    models.DecimalField(decimal_places=2, default=200, max_digits=10),
                ),
                (
                    "maximum_capacity",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("last_purchase_date", models.DateTimeField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("last_movement_date", models.DateTimeField(auto_now=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inventory",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Merchant Inventory",
                "verbose_name_plural": "Merchant Inventories",
                "unique_together": {("merchant", "grade", "batch_number")},
            },
        ),
        migrations.CreateModel(
            name="MarketAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("PRICE_TREND", "Price Trend Analysis"),
                            ("DEMAND_FORECAST", "Demand Forecasting"),
                            ("SUPPLY_ANALYSIS", "Supply Analysis"),
                            ("SEASONAL_PATTERN", "Seasonal Pattern"),
                            ("GRADE_PERFORMANCE", "Grade Performance"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("analysis_period_start", models.DateField()),
                ("analysis_period_end", models.DateField()),
                ("data_points", models.JSONField(default=list)),
                ("statistical_results", models.JSONField(default=dict)),
                ("key_findings", models.JSONField(default=list)),
                ("recommendations", models.TextField()),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                ("is_published", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
            ],
            options={
                "db_table": "merchant_market_analysis",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["analysis_type"], name="merchant_ma_analysi_3a6459_idx"
                    ),
                    models.Index(
                        fields=["grade"], name="merchant_ma_grade_i_28ce8e_idx"
                    ),
                    models.Index(
                        fields=["is_published"], name="merchant_ma_is_publ_06be60_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="GradeComponent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("percentage", models.DecimalField(decimal_places=2, max_digits=5)),
                (
                    "minimum_quantity",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "min_moisture_content",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "max_moisture_content",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("quality_notes", models.TextField(blank=True)),
                (
                    "average_cost_per_kg",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "total_used",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "base_grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
                (
                    "custom_grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="components",
                        to="merchant_app.customgrade",
                    ),
                ),
            ],
            options={
                "verbose_name": "Grade Component",
                "verbose_name_plural": "Grade Components",
                "unique_together": {("custom_grade", "base_grade")},
            },
        ),
        migrations.CreateModel(
            name="DashboardWidget",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "widget_type",
                    models.CharField(
                        choices=[
                            ("INVENTORY_SUMMARY", "Inventory Summary"),
                            ("PRICE_TRENDS", "Price Trends"),
                            ("ORDER_STATUS", "Order Status"),
                            ("AI_RECOMMENDATIONS", "AI Recommendations"),
                            ("MARKET_NEWS", "Market News"),
                            ("FINANCIAL_OVERVIEW", "Financial Overview"),
                            ("RISK_ALERTS", "Risk Alerts"),
                            ("CUSTOM_GRADES", "Custom Grades"),
                            ("FARMER_ASSESSMENTS", "Farmer Assessments"),
                            ("TRANSACTION_HISTORY", "Transaction History"),
                            ("PERFORMANCE_METRICS", "Performance Metrics"),
                            ("WEATHER_FORECAST", "Weather Forecast"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("position_x", models.IntegerField(default=0)),
                ("position_y", models.IntegerField(default=0)),
                ("width", models.IntegerField(default=4)),
                ("height", models.IntegerField(default=3)),
                ("is_visible", models.BooleanField(default=True)),
                ("background_color", models.CharField(default="#ffffff", max_length=7)),
                ("text_color", models.CharField(default="#000000", max_length=7)),
                ("border_style", models.CharField(default="solid", max_length=50)),
                ("settings", models.JSONField(blank=True, default=dict)),
                ("refresh_interval", models.IntegerField(default=300)),
                ("data_filters", models.JSONField(blank=True, default=dict)),
                ("requires_approval", models.BooleanField(default=False)),
                ("is_approved", models.BooleanField(default=True)),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboard_widgets",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dashboard Widget",
                "verbose_name_plural": "Dashboard Widgets",
                "ordering": ["position_y", "position_x"],
                "unique_together": {("merchant", "widget_type")},
            },
        ),
        migrations.CreateModel(
            name="AIRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("PRICING", "Pricing Optimization"),
                            ("INVENTORY", "Inventory Management"),
                            ("MARKET", "Market Opportunity"),
                            ("RISK", "Risk Assessment"),
                            ("QUALITY", "Quality Improvement"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "confidence_level",
                    models.CharField(
                        choices=[
                            ("LOW", "Low (< 60%)"),
                            ("MEDIUM", "Medium (60-80%)"),
                            ("HIGH", "High (> 80%)"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                ("data_sources", models.JSONField(default=list)),
                ("analysis_results", models.JSONField(default=dict)),
                ("recommended_action", models.TextField()),
                ("potential_impact", models.TextField()),
                ("implementation_steps", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("is_implemented", models.BooleanField(default=False)),
                ("implementation_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="timb_dashboard.tobaccograde",
                    ),
                ),
                (
                    "merchant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_recommendations",
                        to="timb_dashboard.merchant",
                    ),
                ),
            ],
            options={
                "db_table": "merchant_ai_recommendations",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["merchant", "-created_at"],
                        name="merchant_ai_merchan_49ecde_idx",
                    ),
                    models.Index(
                        fields=["recommendation_type"],
                        name="merchant_ai_recomme_d7a301_idx",
                    ),
                    models.Index(
                        fields=["is_active"], name="merchant_ai_is_acti_104628_idx"
                    ),
                ],
            },
        ),
    ]
