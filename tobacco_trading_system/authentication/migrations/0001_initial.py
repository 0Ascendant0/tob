# Generated by Django 5.2 on 2025-09-24 10:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "is_timb_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user is a TIMB staff member with administrative privileges.",
                        verbose_name="TIMB Staff",
                    ),
                ),
                (
                    "is_merchant",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user is a registered tobacco merchant.",
                        verbose_name="Merchant",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Contact phone number",
                        max_length=20,
                        null=True,
                        verbose_name="Phone Number",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="tobacco_user_set",
                        related_query_name="tobacco_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="tobacco_user_set",
                        related_query_name="tobacco_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "tobacco_auth_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the company or business",
                        max_length=200,
                        null=True,
                        verbose_name="Company Name",
                    ),
                ),
                (
                    "license_number",
                    models.CharField(
                        blank=True,
                        help_text="Trading license or registration number",
                        max_length=100,
                        null=True,
                        verbose_name="License Number",
                    ),
                ),
                (
                    "registration_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when the license was issued",
                        null=True,
                        verbose_name="Registration Date",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Business or contact address",
                        null=True,
                        verbose_name="Address",
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True,
                        help_text="Company website URL",
                        null=True,
                        verbose_name="Website",
                    ),
                ),
                (
                    "theme_preference",
                    models.CharField(
                        choices=[
                            ("timb", "TIMB Theme"),
                            ("merchant", "Merchant Theme"),
                        ],
                        default="timb",
                        help_text="Preferred dashboard theme",
                        max_length=20,
                        verbose_name="Theme Preference",
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receive email notifications for important updates",
                        verbose_name="Email Notifications",
                    ),
                ),
                (
                    "sms_notifications",
                    models.BooleanField(
                        default=False,
                        help_text="Receive SMS notifications for urgent alerts",
                        verbose_name="SMS Notifications",
                    ),
                ),
                (
                    "encrypted_data",
                    models.TextField(
                        blank=True,
                        help_text="Encrypted storage for sensitive information",
                        null=True,
                        verbose_name="Encrypted Data",
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="profile_pictures/",
                        verbose_name="Profile Picture",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Short biography or description",
                        max_length=500,
                        null=True,
                        verbose_name="Bio",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
                "db_table": "tobacco_user_profile",
            },
        ),
    ]
