# Generated by Cursor AI Assistant
from django.db import migrations, models
import django.db.models.deletion

class Migration(migrations.Migration):
    dependencies = [
        ('timb_dashboard', '0001_initial'),
        ('merchant_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AggregationRuleSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('rule_type', models.CharField(choices=[('AI_TREND', 'AI aggregation - market trends'), ('AI_SPEC', 'AI aggregation - user specification'), ('USER_RULE', 'User-defined aggregation rule'), ('AI_CLIENT_DEMAND', 'AI aggregation - client demand')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('limit_to_inventory', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aggregation_rule_sets', to='timb_dashboard.merchant')),
            ],
            options={'ordering': ['-created_at'], 'verbose_name': 'Aggregation Rule Set', 'verbose_name_plural': 'Aggregation Rule Sets'},
        ),
        migrations.AddIndex(
            model_name='aggregationruleset',
            index=models.Index(fields=['merchant', 'rule_type', '-created_at'], name='merchant_rulertype_created'),
        ),
        migrations.CreateModel(
            name='AggregatedGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('label', models.CharField(blank=True, max_length=120)),
                ('characteristics', models.JSONField(blank=True, default=dict)),
                ('total_quantity_kg', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('inventory_snapshot', models.JSONField(blank=True, default=dict)),
                ('computed_at', models.DateTimeField(auto_now_add=True)),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aggregated_grades', to='timb_dashboard.merchant')),
                ('rule_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to='merchant_app.aggregationruleset')),
            ],
            options={'ordering': ['-computed_at', 'name']},
        ),
        migrations.AddIndex(
            model_name='aggregatedgrade',
            index=models.Index(fields=['merchant', '-computed_at'], name='aggregated_merchant_computed'),
        ),
        migrations.AddIndex(
            model_name='aggregatedgrade',
            index=models.Index(fields=['rule_set', '-computed_at'], name='aggregated_ruleset_computed'),
        ),
        migrations.CreateModel(
            name='AggregatedGradeComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('kilograms', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('notes', models.TextField(blank=True)),
                ('aggregated_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='merchant_app.aggregatedgrade')),
                ('base_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='timb_dashboard.tobaccograde')),
            ],
            options={'verbose_name': 'Aggregated Grade Component', 'verbose_name_plural': 'Aggregated Grade Components'},
        ),
        migrations.AlterUniqueTogether(
            name='aggregatedgradecomponent',
            unique_together={('aggregated_grade', 'base_grade')},
        ),
    ]
